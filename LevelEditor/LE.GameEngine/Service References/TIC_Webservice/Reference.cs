//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LE.GameEngine.TIC_Webservice {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameConfiguration", Namespace="http://schemas.datacontract.org/2004/07/GameEngine.CSharp.Game.Engine")]
    [System.SerializableAttribute()]
    public partial class GameConfiguration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberOfAIField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GameId {
            get {
                return this.GameIdField;
            }
            set {
                if ((this.GameIdField.Equals(value) != true)) {
                    this.GameIdField = value;
                    this.RaisePropertyChanged("GameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numberOfAI {
            get {
                return this.numberOfAIField;
            }
            set {
                if ((this.numberOfAIField.Equals(value) != true)) {
                    this.numberOfAIField = value;
                    this.RaisePropertyChanged("numberOfAI");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TileType", Namespace="http://schemas.datacontract.org/2004/07/GameEngine.CSharp.Game.Board")]
    public enum TileType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        none = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        board = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        blue = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        red = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        yellow = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoardSerializable", Namespace="urn:TIC")]
    [System.SerializableAttribute()]
    public partial class BoardSerializable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LE.GameEngine.TIC_Webservice.HexagonTileSerializable[] ActiveTileListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FortressesPerPlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LE.GameEngine.TIC_Webservice.HexagonTileSerializable[] ActiveTileList {
            get {
                return this.ActiveTileListField;
            }
            set {
                if ((object.ReferenceEquals(this.ActiveTileListField, value) != true)) {
                    this.ActiveTileListField = value;
                    this.RaisePropertyChanged("ActiveTileList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FortressesPerPlayer {
            get {
                return this.FortressesPerPlayerField;
            }
            set {
                if ((this.FortressesPerPlayerField.Equals(value) != true)) {
                    this.FortressesPerPlayerField = value;
                    this.RaisePropertyChanged("FortressesPerPlayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HexagonTileSerializable", Namespace="urn:TIC")]
    [System.SerializableAttribute()]
    public partial class HexagonTileSerializable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FortressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LE.GameEngine.TIC_Webservice.TileType TileTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TileValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Fortress {
            get {
                return this.FortressField;
            }
            set {
                if ((this.FortressField.Equals(value) != true)) {
                    this.FortressField = value;
                    this.RaisePropertyChanged("Fortress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LE.GameEngine.TIC_Webservice.TileType TileType {
            get {
                return this.TileTypeField;
            }
            set {
                if ((this.TileTypeField.Equals(value) != true)) {
                    this.TileTypeField = value;
                    this.RaisePropertyChanged("TileType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TileValue {
            get {
                return this.TileValueField;
            }
            set {
                if ((this.TileValueField.Equals(value) != true)) {
                    this.TileValueField = value;
                    this.RaisePropertyChanged("TileValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TileColor", Namespace="http://schemas.datacontract.org/2004/07/GameEngine.CSharp.Game.Engine")]
    [System.SerializableAttribute()]
    public partial class TileColor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FortressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LE.GameEngine.TIC_Webservice.TileType colorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Fortress {
            get {
                return this.FortressField;
            }
            set {
                if ((this.FortressField.Equals(value) != true)) {
                    this.FortressField = value;
                    this.RaisePropertyChanged("Fortress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LE.GameEngine.TIC_Webservice.TileType color {
            get {
                return this.colorField;
            }
            set {
                if ((this.colorField.Equals(value) != true)) {
                    this.colorField = value;
                    this.RaisePropertyChanged("color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameStats", Namespace="http://schemas.datacontract.org/2004/07/GameEngine.CSharp.Game.Engine")]
    [System.SerializableAttribute()]
    public partial class GameStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BlueCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BlueFortressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RedCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RedFortressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YellowCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YellowFortressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlueCount {
            get {
                return this.BlueCountField;
            }
            set {
                if ((this.BlueCountField.Equals(value) != true)) {
                    this.BlueCountField = value;
                    this.RaisePropertyChanged("BlueCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlueFortress {
            get {
                return this.BlueFortressField;
            }
            set {
                if ((this.BlueFortressField.Equals(value) != true)) {
                    this.BlueFortressField = value;
                    this.RaisePropertyChanged("BlueFortress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RedCount {
            get {
                return this.RedCountField;
            }
            set {
                if ((this.RedCountField.Equals(value) != true)) {
                    this.RedCountField = value;
                    this.RaisePropertyChanged("RedCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RedFortress {
            get {
                return this.RedFortressField;
            }
            set {
                if ((this.RedFortressField.Equals(value) != true)) {
                    this.RedFortressField = value;
                    this.RaisePropertyChanged("RedFortress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int YellowCount {
            get {
                return this.YellowCountField;
            }
            set {
                if ((this.YellowCountField.Equals(value) != true)) {
                    this.YellowCountField = value;
                    this.RaisePropertyChanged("YellowCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int YellowFortress {
            get {
                return this.YellowFortressField;
            }
            set {
                if ((this.YellowFortressField.Equals(value) != true)) {
                    this.YellowFortressField = value;
                    this.RaisePropertyChanged("YellowFortress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStatus", Namespace="http://schemas.datacontract.org/2004/07/GameEngine.CSharp.Game.Engine")]
    public enum PlayerStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        none = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        itsMyTurn = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        triggerAI = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        noMoves = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        gameOver = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TIC_Webservice.ICSharpService")]
    public interface ICSharpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/GetUniqueIdentifier", ReplyAction="http://tempuri.org/ICSharpService/GetUniqueIdentifierResponse")]
        System.Guid GetUniqueIdentifier();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/StartNewGame", ReplyAction="http://tempuri.org/ICSharpService/StartNewGameResponse")]
        void StartNewGame(LE.GameEngine.TIC_Webservice.GameConfiguration configuration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/JoinGame", ReplyAction="http://tempuri.org/ICSharpService/JoinGameResponse")]
        void JoinGame(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/GetCurrentTurn", ReplyAction="http://tempuri.org/ICSharpService/GetCurrentTurnResponse")]
        LE.GameEngine.TIC_Webservice.TileType GetCurrentTurn(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/GetPossibleMoves", ReplyAction="http://tempuri.org/ICSharpService/GetPossibleMovesResponse")]
        int[] GetPossibleMoves(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/ChooseTurn", ReplyAction="http://tempuri.org/ICSharpService/ChooseTurnResponse")]
        void ChooseTurn(System.Guid gameId, System.Guid playerId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/ChooseFortressedTurn", ReplyAction="http://tempuri.org/ICSharpService/ChooseFortressedTurnResponse")]
        void ChooseFortressedTurn(System.Guid gameId, System.Guid playerId, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/RetrieveBoardData", ReplyAction="http://tempuri.org/ICSharpService/RetrieveBoardDataResponse")]
        LE.GameEngine.TIC_Webservice.BoardSerializable RetrieveBoardData(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/GetBoardState", ReplyAction="http://tempuri.org/ICSharpService/GetBoardStateResponse")]
        LE.GameEngine.TIC_Webservice.TileColor[] GetBoardState(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/GetGameStats", ReplyAction="http://tempuri.org/ICSharpService/GetGameStatsResponse")]
        LE.GameEngine.TIC_Webservice.GameStats GetGameStats(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/WhatIsMyColor", ReplyAction="http://tempuri.org/ICSharpService/WhatIsMyColorResponse")]
        LE.GameEngine.TIC_Webservice.TileType WhatIsMyColor(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICSharpService/WhatIsMyStatus", ReplyAction="http://tempuri.org/ICSharpService/WhatIsMyStatusResponse")]
        LE.GameEngine.TIC_Webservice.PlayerStatus WhatIsMyStatus(System.Guid gameId, System.Guid playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICSharpServiceChannel : LE.GameEngine.TIC_Webservice.ICSharpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CSharpServiceClient : System.ServiceModel.ClientBase<LE.GameEngine.TIC_Webservice.ICSharpService>, LE.GameEngine.TIC_Webservice.ICSharpService {
        
        public CSharpServiceClient() {
        }
        
        public CSharpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CSharpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CSharpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CSharpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid GetUniqueIdentifier() {
            return base.Channel.GetUniqueIdentifier();
        }
        
        public void StartNewGame(LE.GameEngine.TIC_Webservice.GameConfiguration configuration) {
            base.Channel.StartNewGame(configuration);
        }
        
        public void JoinGame(System.Guid gameId, System.Guid playerId) {
            base.Channel.JoinGame(gameId, playerId);
        }
        
        public LE.GameEngine.TIC_Webservice.TileType GetCurrentTurn(System.Guid gameId) {
            return base.Channel.GetCurrentTurn(gameId);
        }
        
        public int[] GetPossibleMoves(System.Guid gameId, System.Guid playerId) {
            return base.Channel.GetPossibleMoves(gameId, playerId);
        }
        
        public void ChooseTurn(System.Guid gameId, System.Guid playerId, int id) {
            base.Channel.ChooseTurn(gameId, playerId, id);
        }
        
        public void ChooseFortressedTurn(System.Guid gameId, System.Guid playerId, int id) {
            base.Channel.ChooseFortressedTurn(gameId, playerId, id);
        }
        
        public LE.GameEngine.TIC_Webservice.BoardSerializable RetrieveBoardData(System.Guid gameId) {
            return base.Channel.RetrieveBoardData(gameId);
        }
        
        public LE.GameEngine.TIC_Webservice.TileColor[] GetBoardState(System.Guid gameId) {
            return base.Channel.GetBoardState(gameId);
        }
        
        public LE.GameEngine.TIC_Webservice.GameStats GetGameStats(System.Guid gameId) {
            return base.Channel.GetGameStats(gameId);
        }
        
        public LE.GameEngine.TIC_Webservice.TileType WhatIsMyColor(System.Guid gameId, System.Guid playerId) {
            return base.Channel.WhatIsMyColor(gameId, playerId);
        }
        
        public LE.GameEngine.TIC_Webservice.PlayerStatus WhatIsMyStatus(System.Guid gameId, System.Guid playerId) {
            return base.Channel.WhatIsMyStatus(gameId, playerId);
        }
    }
}
